import numpy as np
import matplotlib.pyplot as plt

N=np.linspace(0.0001,1.5,1000,endpoint=True)

import random 
b = random.uniform(0.000001,10)
a = random.uniform(0,100)

plt.figure(figsize=(10,6),dpi=80)

plt.plot(N, -1*a*N*np.log(b*N), color="blue", linewidth=2.5, linestyle="-")

ax = plt.gca()  # gca stands for 'get current axis'
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.spines['bottom'].set_position(('data',0))
ax.yaxis.set_ticks_position('left')
ax.spines['left'].set_position(('data',0))

font = {'family': 'serif',
        'color':  'darkred',
        'weight': 'normal',
        'size': 16,
        }

plt.title('Ṅ vs N', fontdict=font)

plt.xlabel('N', fontsize=18)
plt.ylabel('Ṅ', fontsize=18)

plt.show()
import random 
a = random.uniform(0, 5)
b = random.uniform(0.5, 4)

t,N = np.meshgrid(np.arange(0, 3, .2), np.arange(0.0001, 4, .5))

u = 0.01
v = u * (-1*a*N*np.log(b*N))

fig, ax = plt.subplots(1, figsize=(10, 6), dpi=80)

# v is the y component of arrow vectors
# u is the x component of arrow vectors
q = ax.quiver(t,N,u,v, edgecolor='k')

plt.title('N(t) vs t', fontdict=font)

plt.xlabel('t', fontsize=18)
plt.ylabel('N(t)', fontsize=18)

plt.show()

from scipy.integrate import odeint
def f(N, t):
    """this is the rhs of the ODE to integrate, i.e. dN/dt=-aNln(bN)"""
    return -1*a*N*np.log(b*N)

plt.figure(figsize=(10, 6), dpi=80)
from scipy.integrate import odeint

N0 = 1             # initial value
c = 0              # integration limits for t
d = 3

t = np.arange(c, d, 0.01)  # values of t for
                          # which we require
                          # the solution N(t)
N = odeint(f, N0, t)  # actual computation of N(t)

plt.plot(t, N, color="blue", linewidth=2.5, linestyle="-") # Graph N(t) vs t
plt.axhline(y=1/b, xmin=0.05, xmax=0.95, color="black", linewidth=2.5, linestyle="--") # Graph N(t) = 1/b (stable size of tumor)

N0 = 0.5             # initial value
c = 0              # integration limits for t
d = 3

t = np.arange(c, d, 0.01)  # values of t for
                          # which we require
                          # the solution N(t)
N = odeint(f, N0, t)  # actual computation of N(t)
plt.plot(t, N, color="red", linewidth=2.5, linestyle="-") # Graph N(t) vs t

N0 = 0.8             # initial value
c = 0              # integration limits for t
d = 3

t = np.arange(c, d, 0.01)  # values of t for
                          # which we require
                          # the solution N(t)
N = odeint(f, N0, t)  # actual computation of N(t)
plt.plot(t, N, color="green", linewidth=2.5, linestyle="-") # Graph N(t) vs t

plt.xlabel('t', fontsize=18)
plt.ylabel('N(t)', fontsize=18)

plt.show()
